// Top-level build file where you can add configuration options common to all sub-projects/modules.
import foundation.e.blisslauncher.buildsrc.Libs
import foundation.e.blisslauncher.buildsrc.DependencyUpdates
import foundation.e.blisslauncher.buildsrc.ReleaseType

buildscript {
    ext.buildConfig = [
        'compileSdk': 30,
        'minSdk'    : 26,
        'targetSdk' : 20,
        'version'   : [
            'major': 0,
            'minor': 1,
            'patch': 0,
            'rev': 1,
        ],
    ]

    ext.buildConfig.version['fullName'] = "${buildConfig.version.name}.${buildConfig.version.rev}"
    ext.buildConfig.version['code'] = buildConfig.version.major * 1000000 +
        buildConfig.version.minor *
        10000 +
        buildConfig.version.patch *
        100 +
        buildConfig.version.rev

    ext.kotlin_version = '1.6.10'
    repositories {
        google()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }
    dependencies {
        classpath Libs.androidGradlePlugin

        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Kotlin.extensions
        classpath Libs.dexcountGradlePlugin
    }
}

plugins {
    id "com.diffplug.spotless" version "6.1.2"
    id 'com.github.ben-manes.versions' version "0.41.0"
}

allprojects {
    repositories {
        google()
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    ext.addFrameworkJar = { String path ->
        def frameworkJar = new File(rootProject.projectDir, 'app/libs/' + path)
        if (!frameworkJar.exists()) {
            throw new IllegalArgumentException("Framework jar path doesn't exist")
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.bootstrapClasspath = layout.files(
                    [frameworkJar] + (options.bootstrapClasspath.files as Iterable<File>))
            }
        }
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"

            // Set JVM target to 11
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }
}

/**
 * Update dependencyUpdates task to reject versions which are more 'unstable' than our
 * current version.
 */
dependencyUpdates {
    rejectVersionIf {
        def current = DependencyUpdates.versionToRelease(it.currentVersion)
        // If we're using a SNAPSHOT, ignore since we must be doing so for a reason.
        if (current == ReleaseType.SNAPSHOT) return true

        // Otherwise we reject if the candidate is more 'unstable' than our version
        def candidate = DependencyUpdates.versionToRelease(it.candidate.version)
        return candidate.isLessStableThan(current)
    }
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}

apply from: file("gradle/dependencyGraph.gradle")
